userName:anudheep_r
public class EmployeeDetails {

   private String name;
   private double monthlySalary;
   private int age;

   // @return the name

   public String getName() {
      return name;
   }

   // @param name the name to set

   public void setName(String name) {
      this.name = name;
   }

   // @return the monthlySalary

   public double getMonthlySalary() {
      return monthlySalary;
   }

   // @param monthlySalary the monthlySalary to set

   public void setMonthySalary(double monthlySalar
// @param monthlySalary the monthlySalary to set

   public void setMonthlySalary(double monthlySalary) {
      this.monthlySalary = monthlySalary;
   }

   // @return the age

   public int getAge() {
      return age;
   }

   // @param age the age to set

   public void setAge(int age) {
      this.age = age;
   }
}








public static void getElementsfromTable() {
                String rows_Locator_xpath = "//table/tbody/tr[2]/td/div/center/table/tbody/tr";
                String cols_Locator_xpath = "//table/tbody/tr[2]/td/div/center/table/tbody/tr[1]/td";
                List<WebElement> rowElements=wd.findElements(By.xpath(rows_Locator_xpath));
                List<WebElement> colElements=wd.findElements(By.xpath(cols_Locator_xpath));
                int rows = rowElements.size();
                int columns = colElements.size();
                System.out.println("rows:"+rows+", cols:"+columns);
                        
                System.out.println("-------");
                for (int i = 1; i <= rows; i++) {
                        for (int j = 1; j <= columns; j++) {
                                WebElement col_element = wd.findElement(By.xpath(
                                                "//table/tbody/tr[2]/td/div/center/table/tbody/tr[" + i + "]/td[" + j + "]"));
                                String col_element_text = col_element.getText().replaceAll("\\s", " ");
                                if (col_element.getText().isEmpty() == false) {
                                        System.out.print(col_element_text + ", ");
                                } else {
                                        WebElement textbox = col_element.findElement(By.xpath("h1/input"));
                                        textbox.clear(); textbox.sendKeys(String.valueOf((int)(Math.random()*4)));
                                        System.out.print(textbox.getAttribute("name")+"="+textbox.getAttribute("value"));
                                }
                        }
                        System.out.println();
                }



import java.time.Duration;
import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class Boreland {
	private static WebDriver wd;
	private static WebElement we;
	private static String path = "C:\\Selenium\\CoreFiles\\";

	public static void main(String[] args) {

		openBrowser("chrome");
		navigateToGMOSite();
		catalogPage();
//		placeOrderPage();
//		billingPage();
//		receiptPage();
		closeBrowser();
	}

	private static void openBrowser(String browserName) {
		if (browserName.equalsIgnoreCase("firefox")) {
			System.setProperty("webdriver.gecko.driver", path + "geckodriver.exe");
			wd = new FirefoxDriver();
		} else if (browserName.equalsIgnoreCase("chrome")) {
			System.setProperty("webdriver.chrome.driver", path + "chromedriver.exe");
			wd = new ChromeDriver();
		} else {
			System.setProperty("webdriver.edge.driver", path + "msedgedriver.exe");
			wd = new EdgeDriver();
		}
		wd.manage().window().maximize();
		wd.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

	}

	private static void navigateToGMOSite() {
		wd.get("https://demo.borland.com/gmopost/");
		wd.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));
		System.out.println("Navigated to: " + wd.getTitle());
		we = wd.findElement(By.cssSelector("h1>font"));
		System.out.println("Home page Caption:" + we.getText());
		otherPagesinHomePage();

	}

	private static void otherPagesinHomePage() {
		wd.findElement(By.cssSelector("[name='bAbout']")).click();
		wd.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));
		System.out.println("Navigated to:" + wd.getTitle());
		wd.navigate().back();

		wd.findElement(By.cssSelector("[name='bBrowserTest']")).click();
		wd.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));
		System.out.println("Navigated to:" + wd.getTitle());
		wd.navigate().back();

		System.out.println("Navigated back to:" + wd.getTitle());
	}

	private static void catalogPage() {
		we = wd.findElement(By.xpath("//input[@value='Enter GMO OnLine']"));
		we.click();
		wd.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));
		System.out.println("Navigated to: " + wd.getTitle());
//		checkBrokenLinksOfItems();
//		getElementsfromTable();
//		getElementsfromTableStream();
//		enterOrderQuantity();
		WebElement PlaceorderButton = wd.findElement(By.name("bSubmit"));

		PlaceorderButton.click();

		while (isAlertPresent()) {

			wd.switchTo().alert().accept();

			enterOrderQuantity();

			PlaceorderButton.click();

		}

	}

	private static boolean isAlertPresent() {

		try {

			wd.switchTo(). alert();
			return true; 
		} catch (Exception e) { 
			return false;

		}

	}

	private static void checkBrokenLinksOfItems() {

		List<WebElement> lstitems = wd.findElements(By.cssSelector("a>strong"));

		lstitems.stream().map(x -> x.getText()).forEach(System.out::println);
		int i = 0;
		while (i < lstitems.size()) {
			String itemName = lstitems.get(i).getText();
			System.out.println("Click on: " + itemName);
			lstitems.get(i).click();
			String productName = wd.findElement(By.xpath("//h2[" + (i + 1) + "]/a")).getText();
			System.out.println("productName:" + productName);
			wd.navigate().back();
			i++;
			lstitems = wd.findElements(By.cssSelector("a>strong"));
		}

	}

	private static void placeOrderPage() {
		we = wd.findElement(By.name("QTY_TENTS"));
		we.clear();
		we.sendKeys("2");
		wd.findElement(By.name("bSubmit")).click();
		wd.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));
		System.out.println("Navigated to: " + wd.getTitle());
	}

	private static void billingPage() {
		wd.findElement(By.name("bSubmit")).submit();
		wd.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));
		System.out.println("Navigated to: " + wd.getTitle());
		wd.findElement(By.name("billName")).sendKeys("sakha");
		wd.findElement(By.name("billAddress")).sendKeys("BSK II Stg");
		wd.findElement(By.name("billCity")).sendKeys("Bengaluru");
		wd.findElement(By.name("billState")).sendKeys("Karnataka");
		wd.findElement(By.name("billZipCode")).sendKeys("12345");
		wd.findElement(By.name("billPhone")).sendKeys("1234567890");
		wd.findElement(By.name("billEmail")).sendKeys("sakha@blr.in");
		wd.findElement(By.name("CardNumber")).sendKeys("123456789012345");
		wd.findElement(By.name("CardDate")).sendKeys("12/24");
		wd.findElement(By.cssSelector("[name='shipSameAsBill']")).click();
		wd.findElement(By.cssSelector("[value='Place The Order']")).click();
	}

	private static void receiptPage() {
		wd.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));
		System.out.println("Navigated to: " + wd.getTitle());
		wd.findElement(By.name("bSubmit")).submit();
		wd.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));
		System.out.println("Navigated to: " + wd.getTitle());
	}

	private static void closeBrowser() {
		wd.quit();
	}

	public static void getElementsfromTable() {
		String rows_Locator_xpath = "//table/tbody/tr[2]/td/div/center/table/tbody/tr";
		String cols_Locator_xpath = "//table/tbody/tr[2]/td/div/center/table/tbody/tr[1]/td";
		List<WebElement> rowElements = wd.findElements(By.xpath(rows_Locator_xpath));
		List<WebElement> colElements = wd.findElements(By.xpath(cols_Locator_xpath));
		int rows = rowElements.size();
		int columns = colElements.size();
		System.out.println("rows:" + rows + ", cols:" + columns);

		System.out.println("-------");
		for (int i = 1; i <= rows; i++) {
			for (int j = 1; j <= columns; j++) {
				WebElement col_element = wd.findElement(
						By.xpath("//table/tbody/tr[2]/td/div/center/table/tbody/tr[" + i + "]/td[" + j + "]"));
				String col_element_text = col_element.getText().replaceAll("\\s", " ");
				if (col_element.getText().isEmpty() == false) {
					System.out.print(col_element_text + ", ");
				} else {
					WebElement textbox = col_element.findElement(By.xpath("h1/input"));
					textbox.clear();
					textbox.sendKeys(String.valueOf((int) (Math.random() * 4)));
					System.out.print(textbox.getAttribute("name") + "=" + textbox.getAttribute("value"));
				}
			}
			System.out.println();
		}
	}

	public static void getElementsfromTableStream() {
		System.out.println();
		List<WebElement> items = wd.findElements(By.xpath("//table/tbody/tr[2]/td/div/center/table/tbody/tr/td"));
		items.stream().map(item -> item.getText().replaceAll("\\s", " ")).filter(item -> !item.isEmpty())
				.forEach(name -> System.out.print(name + ", "));

		System.out.println();
		List<WebElement> orderQty = wd.findElements(By.xpath("//form/table/tbody/tr[2]//table/tbody/tr/td/h1/input"));
		orderQty.stream()
//      .map(item->item.clear())
//        .map(item->item.sendKeys(String.valueOf((int) (Math.random() * 4))))
				.map(item -> item.getAttribute("name") + "=" + item.getAttribute("value"))
				.forEach(name -> System.out.print(name + ", "));
	}

	private static void enterOrderQuantity() {

		// input the quantity in the Order Quantity column - Random selection of Items

		// store the Item Name and price for the quantity entered.

		List<WebElement> QuantityFields = wd.findElements(By.xpath("//input[@type='text']"));
		int NoOfQuantityFields = QuantityFields.size();
		System.out.println("Number of rows in the catalog table: " + NoOfQuantityFields);
		int randVal = (int) (Math.random() * NoOfQuantityFields);
		System.out.println("random value: " + randVal);
		String qty = String.valueOf(randVal);
		enterData(QuantityFields.get(randVal), qty);
		System.out.println("Item selected: " + QuantityFields.get(randVal).getAttribute("name") + "="

				+ QuantityFields.get(randVal).getAttribute("value"));

	}

	private static void enterData(WebElement we, String qty) {
		we.clear();
		we.sendKeys(qty);

	}
}



String[] billAddress = new String[7];
                try {
                        XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream("F:\\Training\\Selenium\\TestData\\gmoBillAddress.xlsx"));
               ublic static void readExcel() throws IOException {
                     int sheetIndex = 0;
                        XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
                        for (Row tempRow : sheet) {
                                int i = 0;
                                System.out.println(tempRow.getRowNum());
                                if (tempRow.getRowNum() > 0) {
                                        for (Cell tempCell : tempRow) {
                                                if (tempCell.getCellType() == CellType.STRING)
                                                        billAddress[i] = tempCell.getStringCellValue();
                                                if (tempCell.getCellType() == CellType.NUMERIC) {
                                                        billAddress[i] = String.valueOf((int) tempCell.getNumericCellValue());
                                                }
                                                i++;
                                        }
                                        System.out.println(Arrays.toString(billAddress));
                                        navigateToGMOSite();
                                        catalogPage();
                                        placeOrderPage();
                                        billingPage(billAddress);
                                        receiptPage();
                                }
                        }
                } catch (FileNotFoundException fnfe) {
                        fnfe.printStackTrace();
                } catch (IOException ioe) {
                        ioe.printStackTrace();
                }













.peek(item -> item.clear()) // performs the provided action on each element as elements are consumed from the resulting stream
                        .peek(item -> item.sendKeys(String.valueOf((int) (Math.random() * 4))))
        